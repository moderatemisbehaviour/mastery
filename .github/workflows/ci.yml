name: CI

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

jobs:
  install:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    steps:
      # Would be simpler to not use a builder and use actions to install and cache
      - uses: actions/checkout@v2
      - name: Cache API
        uses: actions/cache@v1
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: node-modules-api-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
      - name: Cache React app
        uses: actions/cache@v1
        with:
          path: ${{ github.workspace }}/client/build/
          key: react-app-${{ runner.os }}

      - name: Build Builder
        run: docker build -f ${{ github.workspace }}/ci/builder/Dockerfile --tag builder ${{ github.workspace }}/ci/builder
      - name: Install API dependencies
        run: docker run -v ${{ github.workspace }}:/mastery builder npm install --unsafe-perm --prefix mastery
      - name: Install app dependencies
        run: docker run -v ${{ github.workspace }}/client:/mastery/client builder npm install --prefix mastery/client
      - name: Build React app
        run: docker run -v ${{ github.workspace }}/client:/mastery/client builder npm run build --prefix mastery/client

  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  # test:
  #   needs: install

  #   # Wanted to use a service container for sorry-cypress here but it creates one instance per job rather than one for the whole matrix.
  #   runs-on: ubuntu-latest
  #   strategy:
  #     # when one test fails, DO NOT cancel the other
  #     # containers, because this will kill Cypress processes
  #     # leaving the Dashboard hanging ...
  #     # https://github.com/cypress-io/github-action/issues/48
  #     fail-fast: false
  #     matrix:
  #       # run 3 copies of the current job in parallel
  #       containers: [1, 2, 3]

  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Restore API
  #       uses: actions/cache@v1
  #       with:
  #         path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
  #         key: node-modules-api-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
  #     - name: Restore React app
  #       uses: actions/cache@v1
  #       with:
  #         path: ${{ github.workspace }}/client/build/
  #         key: react-app-${{ runner.os }}

  #     - uses: cypress-io/github-action@v1
  #       with:
  #         build: ${{ github.workspace }}/ci/sorry-cypress/update-cypress-dashboard-api-url.sh
  #         headless: true
  #         record: true
  #         parallel: true
  #         start: docker-compose up -d
  #         wait-on: 'http://localhost:3001'
  #         stop: docker-compose stop
  #       env:
  #         # Fake record key passed to directory service
  #         CYPRESS_RECORD_KEY: xxxx

  # Push package to GitHub Packages.
  # publish:
  #   # Ensure test job passes before pushing image.
  #   needs: install

  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v2

  #     # Setup .npmrc file to publish to GitHub Packages
  #     - uses: actions/setup-node@v1
  #       with:
  #         node-version: '10.x'
  #         registry-url: 'https://npm.pkg.github.com'
  #         scope: '@moderatemisbehaviour' # Defaults to the user or organization that owns the workflow file
  #     - run: npm install
  #     - run: |
  #         # Strip git ref prefix from version
  #         VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

  #         # Strip "v" prefix from tag name
  #         [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

  #         # Use SHA if PR
  #         [[ "${{ github.ref }}" == "refs/pull/"* ]] && VERSION=${{ github.sha }}

  #         # Use Docker `latest` tag convention
  #         [ "$VERSION" == "master" ] && VERSION=latest

  #         echo VERSION=$VERSION

  #         npm publish --tag $VERSION
  #       env:
  #         NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    needs: install
    runs-on: ubuntu-latest
    env:
      GOOGLE_APPLICATION_CREDENTIALS: ${{ $HOME/secrets/app-engine-deployer-key.json }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Decrypt service account key
        run: ${{ github.workspace }}/ci/decrypt-key.sh ${{ github.workspace }}/ci/app-engine-deployer-key.json.gpg app-engine-deployer-key.json ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_PASSPHRASE }}

      # Setup and configure gcloud CLI
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '0.1.1'
          project_id: ${{ secrets.PROJECT_ID }}
          service_account_key: ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}

      # Deploy App to App Engine
      - name: Deploy
        run: gcloud app deploy